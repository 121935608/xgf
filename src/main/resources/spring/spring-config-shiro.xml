<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:jee="http://www.springframework.org/schema/jee" xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="    
        http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.0.xsd  
        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd  
        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd  
        http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee-4.0.xsd  
        http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.0.xsd">

	<!-- 自定义Realm -->
	<bean id="userRealm" class="org.apache.shiro.realm.UserRealm">
		<!-- 用切面缓存代理了 此处就不缓存了 -->
		<property name="authenticationCachingEnabled" value="false" />
		<property name="authorizationCachingEnabled" value="false" />
	</bean>
	
	<!-- 缓存管理器 使用Ehcache实现 -->
	<bean id="cacheManager" class="org.apache.shiro.cache.ehcache.EhCacheManager">
		<property name="cacheManagerConfigFile" value="classpath:ehcache/ehcache-shiro.xml" />
	</bean>

	<!-- 记住我cookie -->
	<bean id="rememberMeCookie" class="org.apache.shiro.web.servlet.SimpleCookie">
		<constructor-arg value="${shiro.uid.rememeberMe.cookie.name}" />
		<property name="domain" value="${shiro.uid.cookie.domain}" />
		<property name="path" value="${shiro.uid.cookie.path}" />
		<property name="httpOnly" value="${shiro.uid.cookie.httpOnly}" />
		<property name="maxAge" value="${shiro.uid.rememeberMe.cookie.maxAge}" />
	</bean>

	<!-- rememberMeManager管理器，写cookie，取出cookie生成用户信息 -->
	<bean id="rememberMeManager" class="org.apache.shiro.web.mgt.CookieRememberMeManager">
		<!-- rememberme cookie加密的密钥 建议每个项目都不一样 默认AES算法 密钥长度（128 256 512 位） -->
		<property name="cipherKey"
			value="#{T(org.apache.shiro.codec.Base64).decode('${shiro.uid.rememeberMe.cookie.base64.cipherKey}')}" />
		<property name="cookie" ref="rememberMeCookie" />
	</bean>

	<!-- 会话DAO 获取在线人数 -->
	<bean id="sessionDAO"
		class="org.apache.shiro.session.mgt.eis.EnterpriseCacheSessionDAO">
	</bean>

	<!-- 会话管理器 -->
	<bean id="sessionManager"
		class="org.apache.shiro.web.session.mgt.DefaultWebSessionManager">
		<property name="globalSessionTimeout" value="${shiro.session.globalSessionTimeout}" /> <!-- session的失效时长，单位毫秒 -->
		<property name="deleteInvalidSessions" value="true" />  <!-- 删除失效的session -->
		<property name="sessionDAO" ref="sessionDAO" />
	</bean>

	<!-- 安全管理器 -->
	<bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
		<property name="realm" ref="userRealm" />                      <!-- 注入自定义管理器 -->
		<property name="sessionManager" ref="sessionManager" />        <!-- 注入session管理器 -->
		<property name="rememberMeManager" ref="rememberMeManager" />  <!-- 记住我 -->
	</bean>

	<!-- 基于Form表单的身份验证过滤器，不配置将也会注册此过虑器，表单中的用户账号、密码及loginurl将采用默认值，建议配置 -->
	<bean id="formAuthenticationFilter"
		class="org.apache.shiro.web.filter.authc.CustomFormAuthenticationFilter">
		<property name="defaultSuccessUrl" value="${shiro.default.success.url}"/>
		<!--表单上的用户名/密码 下次自动登录的参数名 -->
		<property name="usernameParam" value="username" />      <!-- 表单中账号的input名称 -->
		<property name="passwordParam" value="password" />      <!-- 表单中密码的input名称 -->
		<property name="rememberMeParam" value="rememberMe" />  <!-- 记住我input的名称 -->
	</bean>
	
	 <!-- 退出登录过滤器 -->
    <bean id="logoutFilter" class="org.apache.shiro.web.filter.authc.LogoutFilter">
        <property name="redirectUrl" value="${shiro.logout.success.url}"/>
    </bean>
    
     <!--提取系统用户（User） 验证用户是否合法的过滤器（如是否删除了 是否锁定了） -->
    <bean id="sysUserFilter" class="org.apache.shiro.web.filter.user.SysUserFilter">
        <property name="userBlockedUrl" value="${shiro.user.blocked.url}"/>
    </bean>
    
    <!-- 验证码 -->
	<bean id="jCaptchaValidateFilter" class="org.apache.shiro.web.filter.jcaptcha.JCaptchaValidateFilter">
        <property name="jcaptchaEbabled" value="${shiro.jcaptcha.enable}"/>
        <property name="jcaptchaParam" value="jcaptchaCode"/>
    </bean>

	<!-- Shiro过滤器 -->
	<bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
		<!-- Shiro的核心安全接口,这个属性是必须的 -->
		<property name="securityManager" ref="securityManager" />
		<!-- 身份认证失败，则跳转到登录页面的配置 -->
		<property name="loginUrl" value="${shiro.login.url}"/>
		<!-- 权限认证失败，则跳转到指定页面 -->
		 <property name="unauthorizedUrl" value="${shiro.unauthorizedUrl}"/>
		<!-- 自定义filter配置 -->
		<property name="filters">
			<map>
				<!-- 将自定义 的FormAuthenticationFilter注入shiroFilter中 -->
				<entry key="authc" value-ref="formAuthenticationFilter"/>
                <entry key="logout" value-ref="logoutFilter"/>
                <entry key="sysUser" value-ref="sysUserFilter"/>
				<entry key="jCaptchaValidate" value-ref="jCaptchaValidateFilter"/>
			</map>
		</property>
		<property name="filterChainDefinitionMap" ref="chainDefinitionSectionMetaSource" />
	</bean>

	<!-- Shiro连接约束配置,即过滤链的定义 -->
	<bean id="chainDefinitionSectionMetaSource"
		class="org.apache.shiro.web.filter.security.SecurityFilterChainDefinitionSource">
		<property name="filterChainDefinitions">
			<value>
			    <!-- 对微信公众号测试方法匿名访问 -->
			    /WechatCallbackApi.do = anon
				<!-- 对静态资源设置匿名访问 -->
				/uiloader/** = anon
				<!-- 验证码，可匿名访问 -->
				/jcaptcha* = anon
				<!-- 退出 logout.action地址，shiro去清除session -->
				/logout.action = logout
				<!-- 登录功能  校验验证码 用户信息-->
				/login.action* = jCaptchaValidate,authc
			</value>
		</property>
	</bean>

	<!-- 保证实现了Shiro内部lifecycle函数的bean执行 -->
	<bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor" />

	<!-- 开启Shiro注解 -->
	<bean
		class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator"
		depends-on="lifecycleBeanPostProcessor" />
	<bean
		class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor">
		<property name="securityManager" ref="securityManager" />
	</bean>

</beans>